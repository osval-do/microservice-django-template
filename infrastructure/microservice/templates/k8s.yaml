# TODO parse "m8e-host" -> host namespace
# TODO parse "{{ .Values.MICROSERVICE_NAME }}" ->  {{ .Values.MICROSERVICE_NAME }} name

apiVersion: apps/v1
kind: List
namespace: {{ .Values.MICROSERVICE_NAMESPACE }}
items:

  # Microservice django app
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: {{ .Values.MICROSERVICE_NAME }}-dpl
    spec:
      replicas: 1
      selector:
        matchLabels:            
          app: {{ .Values.MICROSERVICE_NAME }}
      template:
        metadata:
          labels:
            app: {{ .Values.MICROSERVICE_NAME }}
        spec:
          containers:
            - name: {{ .Values.MICROSERVICE_NAME }}
              # Change the following line to the path to obtain the image for the cluster
              # (which can be docker hub or a personal docker repository):
              image: {{ .Values.DJANGO_IMAGE_NAME }}:latest
              envFrom:
                - secretRef:
                    name: {{ .Values.SECRET_SETTINGS_NAME }}
              env:
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.SECRET_SETTINGS_NAME }}
                      key: DATABASE_PASSWORD
                - name: SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                        name: {{ .Values.SECRET_SETTINGS_NAME }}
                        key: SECRET_KEY
                - name: JWT_VERIFY_KEY
                  valueFrom:
                    secretKeyRef:
                        name: {{ .Values.SECRET_SETTINGS_NAME }}
                        key: JWT_VERIFY_KEY
                - name: JWT_SIGN_KEY
                  valueFrom:
                    secretKeyRef:
                        name: {{ .Values.SECRET_SETTINGS_NAME }}
                        key: JWT_SIGN_KEY
                - name: AMQP_URL
                  value: "amqp://guest:guest@message-broker-np.{{ .Values.COMMON_NAMESPACE }}:5672/"
                - name: ALLOWED_HOSTS
                # In production this value should be the host:
                  value: "*"
                - name: DEBUG
                  value: "True"
                - name: DATABASE_URL
                  value: "postgres://postgres:$(POSTGRES_PASSWORD)@{{ .Values.MICROSERVICE_NAME }}-db-cip:5432/django_db"

                

  # Microservice node port
  - kind: Service
    apiVersion: v1
    metadata:
      name: {{ .Values.MICROSERVICE_NAME }}-np
    spec:
      type: NodePort
      selector:
        app: {{ .Values.MICROSERVICE_NAME }}
      ports:
        - name: {{ .Values.MICROSERVICE_NAME }}
          protocol: TCP      
          port: 8000
          targetPort: 8000

  # Microservice cluster ip
  - kind: Service
    apiVersion: v1
    metadata:
      name: {{ .Values.MICROSERVICE_NAME }}-cip
    spec:
      type: ClusterIP
      selector:
        app: {{ .Values.MICROSERVICE_NAME }}
      ports:
        - name: {{ .Values.MICROSERVICE_NAME }}
          protocol: TCP
          port: 8000
          targetPort: 8000

  # Database volume
  - kind: PersistentVolume
    apiVersion: v1
    metadata:
      name: {{ .Values.MICROSERVICE_NAME }}-db-vol
    spec:
      storageClassName: manual
      capacity:
        storage: 4Gi
      accessModes:
        - ReadWriteMany
      hostPath:
        # Note: This path should be unique for your {{ .Values.MICROSERVICE_NAME }} in minikube:
        path: "/mnt/data/{{ .Values.MICROSERVICE_NAME }}"

  # Microservice DB (Postgres)
  - kind: StatefulSet
    apiVersion: apps/v1
    metadata:
      name: {{ .Values.MICROSERVICE_NAME }}-db
    spec:
      replicas: 1
      selector:
        matchLabels:            
          app: {{ .Values.MICROSERVICE_NAME }}-db
      template:
        metadata:
          labels:
            app: {{ .Values.MICROSERVICE_NAME }}-db
        spec:
          containers:
            - name: {{ .Values.MICROSERVICE_NAME }}-db
              image: postgres:14.5
              imagePullPolicy: "IfNotPresent"
              ports:
                - containerPort: 5432
              env:
                - name: POSTGRES_DB
                  value: django_db
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.SECRET_SETTINGS_NAME }}
                      key: DATABASE_PASSWORD
              volumeMounts:
                - mountPath: /var/lib/postgresql/data
                  name: postgredb
      volumeClaimTemplates:
      - metadata:
          name: postgredb
        spec:
          storageClassName: manual
          accessModes:
            - ReadWriteMany
          resources:
            requests:
              storage: 4Gi

  # Microservice DB cluster ip
  - kind: Service
    apiVersion: v1
    metadata:
      name: {{ .Values.MICROSERVICE_NAME }}-db-cip
    spec:
      type: ClusterIP
      selector:
        app: {{ .Values.MICROSERVICE_NAME }}-db
      ports:
        - name: {{ .Values.MICROSERVICE_NAME }}-db
          protocol: TCP
          port: 5432
          targetPort: 5432

  # Microservice ingress config
  - kind: Ingress
    apiVersion: networking.k8s.io/v1  
    metadata:
      name: {{ .Values.MICROSERVICE_NAME }}-ingress
      annotations:
        kubernetes.io/ingress.class: nginx
        cert-manager.io/issuer: letsencrypt-staging
    spec:
      tls:
      - hosts:
        - {{ .Values.DOMAIN_NAME }}
        secretName: echo-tls
      rules:
        - host: localhost
          http:
            paths:
              - path: /{{ .Values.MICROSERVICE_NAME }}
                pathType: Prefix
                backend:
                  service:
                    name: {{ .Values.MICROSERVICE_NAME }}-cip
                    port:
                      number: 8000
